# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @upper on FIELD_DEFINITION

"""Summary"""
type Summary {
  date: Date
  time: Int
}

type SummaryGetResponse {
  data: [Summary!]!
  totalTime: Int!
}

"""Task"""
type Task {
  _id: String
  taskId: String
  date: Date
  name: String
  comment: String
  completeness: Int
  excludedFromSearch: Boolean
}

type TaskCreateResponse {
  data: Task!
}

type TaskUpdateResponse {
  data: Task!
}

type TaskGetResponse {
  data: [Task!]!
}

type TaskDeleteResponse {
  data: Task!
}

"""Timestamp"""
type Timestamp {
  timestamp: Date
  type: TimestampType
}

enum TimestampType {
  Start
  End
  StartBreak
  EndBreak
}

type TimestampCreateResponse {
  data: Timestamp!
}

type TimestampGetResponse {
  data: [Timestamp!]!
  workTime: [Int!]!
  breaks: [Int!]!
  totalTime: Int!
}

type TimestampDeleteResponse {
  data: Timestamp!
}

"""Calendar"""
type Calendar {
  date: Date
  type: CalendarType
  time: Int
}

enum CalendarType {
  WorkingDay
  Weekend
  PaidWeekend
  SickLeave
  PaidSickLeave
  BusinessTrip
}

type CalendarCreateResponse {
  data: Calendar!
}

type CalendarGetResponse {
  data: [Calendar!]!
  totalTime: Int
}

type CalendarDeleteResponse {
  data: Calendar!
}

type AccountLoginResponse {
  """Generated access_token of the user"""
  access_token: String!
}

type AccountRegisterResponse {
  """email of the user"""
  email: String!
}

"""UserApps"""
type UserApps {
  """App ID"""
  appId: String!

  """App status"""
  appStatus: AppStatus!
}

enum AppStatus {
  Inactive
  Active
  Deleted
}

"""UserJwtPayload"""
type UserJwtPayload {
  id: String
  email: String
  displayName: String
}

"""Date custom scalar type"""
scalar Date

type Query {
  userInfo: UserJwtPayload!
  timestamps(date: Date, raw: Boolean): TimestampGetResponse!
  summary(from: Date, to: Date, recalculate: Boolean): SummaryGetResponse!
  tasks(from: Date, to: Date, incomplete: Boolean, includeAll: Boolean): TaskGetResponse!
  calendar(year: Int, month: Int, fillUp: Boolean, firstDayOfWeek: FirstDayOfWeek, summary: Boolean): CalendarGetResponse!
}

enum FirstDayOfWeek {
  Sunday
  Monday
}

type Mutation {
  register(request: AccountRegisterRequest!): AccountRegisterResponse!
  login(request: AccountLoginRequest!): AccountLoginResponse!
  createTimestamp(timestamp: Date!, type: TimestampType!): TimestampCreateResponse!
  deleteTimestamp(timestamp: Date!): TimestampDeleteResponse!
  createTask(taskId: String, date: Date!, name: String!, comment: String, completeness: Int, excludedFromSearch: Boolean): TaskCreateResponse!
  updateTask(id: String!, taskId: String, name: String, comment: String, completeness: Int, excludedFromSearch: Boolean): TaskUpdateResponse!
  deleteTask(id: String!): TaskDeleteResponse!
  createCalendarDay(date: Date!, type: CalendarType!): CalendarCreateResponse!
  deleteCalendarDay(date: Date!): CalendarDeleteResponse!
}

input AccountRegisterRequest {
  """email of the user"""
  email: String!

  """password of the user"""
  password: String!

  """name of the user"""
  displayName: String
}

input AccountLoginRequest {
  """email of the user"""
  email: String!

  """password of the user"""
  password: String!
}

type Subscription {
  taskAdded: TaskCreateResponse!
}